30 Jan 2021

I will write a chess program based on python chess which encapsulates my ideas
about chess. This is for the challenge of clear thinking and I have no initial
plans to make this a commercial success or even to make it useful for others.

My approach will be based on a well-respected thinking method based on a the
approach used by Karpov. I am using this because it makes sense to me and
the system is described well in the book 'finding the right plan'.

Python chess has a number of features which I will use to create the required
program. I will need to learn python on the fly, so don't look to the code as
an example. I confident that I can get some of my ideas working, but don't
expect my approach to be "pythonic"!

02/01/21
I added a README file and a LICENCE file, basing the licence on the MIT open
licence. Added an 'import' file to import the chess module from Python Chess.
Tested and committed changes.

review- the use of a import file is probably unnecessary and confusing better
to import where needed in individual files. There appears to be no problem
in Python over duplicate imports.

In establishing a chess program I wish to use my own ideas. I have read up on
the approaches used by others, but feel you can only do something valuable if
you do it differently.

So: What is my aim and what will be my approach?

My aim...

There are many 'playing' programs, so this will not be one more.. Instead I
want a program which will take a position and identify to important features
of that position. The aim is to guide a human player.

My approach...

These have not been fully clarified in my mind, but my main ideas are:-

1 That in order to identify the elements in a position that position must be
  'settled'. My initial idea is to explore a position initially and produce
  an array of the likely derived positions and to analyse each of these.

2 The position analysis will be based on the Karpov approach

3 The positions will display with some type of prompt showing the elements
  in a verbal form.

  Taking these one at a time

  1 Position clarification

    a need to identify validity of the position

    b need to identify if our king is in check

    c need to identify pinned pieces

    d  need to identify the forcing moves in a position i.e.
      i   checks
      ii  captures
      iii attacks on a Queen
      iv  attacks on an unprotected piece
      v   pins
      vi  pawn promotion
      vii attacks on a higher value piece

Starting with 1a I undertook a simple test on the python Chess
library. In a Jupyter Notebook I removed the black king from the
starting position and generated a board. This was accepted by the
library without complaint. I will need, therefore, to develop my own
routine to check the validity of the position.

The analysis of board validity will always be taken from the viewpoint
of the colour which is to play. This perspective will be called 'the
player'. The other side will be identified as 'the opponent'.

The analysis will always be made with The Player to move.

The validity tests I will use are:-
  Are there exactly one king for each side on the board?
  Is the opponent in check?
    If so then the position is invalid. The opponent has not played
    a move to get himself out of check or has played a move which has
    put himself in check.
  Are there less than 9 White Pawns and 9 Black Pawns on the board?
  Are there less than 17 White Pieces and 17 Black Pieces on the Board?
  Is the total of pawns and queens for each side less that 10?
  Does each side have a maximum of one white-squared and black-squared
    Bishop?
      This might be possible if one of the sides under-promoted to
      a Bishop, but this is unlikely.
  Are there any Pawns on the 1st or 8th Rank of the Board?

4/2/21
Added file to check for position validity from a fen string.

Began to add checks on validity:
  1 fen includes the correct number of parts
  2 that board has one White and one Black kings

at this stage the identification of an error results in a text
message

5/2/21
Added errorLog to positionValidity.py for testing purposes

7/2/21
I want to give the user the opportunity to correct the fen.

The board string has not, yet, been fully checked so initially
I need to check the other elements to see if any of them are
acceptable. There will be need to be checks later to see if they
accord to the fan rules. Maybe I can use these to search the
elements of the fen string to see if any appear correct.

Whilst this approach may necessitate a re-write to confirm each
element in turn I will initially concentrate on the testing.

fenToPlay must be a single character, either w or b although I
will also accept the capitalised. (Need to check what is correct
in the fen specs and adjust the element accordingly)

9/2/21

added pytest checks for positionValidity

added fen validity check for castling

10/2/21

added test validity of EP square in fen. Decided to set these to 0 and 1
respectively if they are incorrect.

adapted 'unknown' elements in case of inadequate fen.

added tests for half move and move count

11/2/21

Decided to re-factor the board checks into a new class for complex board
checks, importing features from pychess, if necessary. (Initially the import
would be by construction rather than inheritance) This is because some of
the problems (such as identifying whether a king is in check) have already
been solved in pychess.

This approach will need the fen elements to be passed to the new class, so an
initial check that all 'unknown' items have been corrected. I will also need
to build in a check that the 'unknown' fen elements are consistent with the
errorLog. I will also need to be able to reconstruct the fen string from the
fen elements.

The order of these changes are, therefore,
  1 compare 'unknown' elements to error log
  2 process required to clear all 'unknown' elements
  3 rebuild full fen string (if all unknowns have been solved)
  4 add board checking class

Non-Board Error Codes List
  error Codes           unknown
  fenError              ..one or more of.. fenToPlay, fenError, fenCastling,
                        fenEP [fenHalfMoveClock and fenMoveCounter are reset to 0
                        1 respectively if original fen is incorrect]
  fenToPlayError        fenToPlay
  fenToPlayLength       fenToPlay
  fenCastlingError      fenCastling
  fenCastlingLength     fenCastling
  fenEPLength           fenEP
  fenEPSquareInvalid    fenEP
  fenEPSquareUnclear    fenEP [This is where it is not known which player is
                        next to play, so the quoted EP square cannot be
                        confirmed]
(see ErrorCode.txt for fuller explanation and details of fenBoard errors)

ACTION added test for fenBoard (not 'unknown'), test_fenHalfMoveClock (is a
digit) and test_fenMoveCounter (is a digit)

ACTION add check of error codes against 'unknown items'




















  #
