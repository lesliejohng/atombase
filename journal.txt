30 Jan 2021

I will write a chess program based on python chess which encapsulates my ideas
about chess. This is for the challenge of clear thinking and I have no initial
plans to make this a commercial success or even to make it useful for others.

My approach will be based on a well-respected thinking method based on a the
approach used by Karpov. I am using this because it makes sense to me and
the system is described well in the book 'finding the right plan'.

Python chess has a number of features which I will use to create the required
program. I will need to learn python on the fly, so don't look to the code as
an example. I confident that I can get some of my ideas working, but don't
expect my approach to be "pythonic"!

02/01/21
I added a README file and a LICENCE file, basing the licence on the MIT open
licence. Added an 'import' file to import the chess module from Python Chess.
Tested and committed changes.

review- the use of a import file is probably unnecessary and confusing better
to import where needed in individual files. There appears to be no problem
in Python over duplicate imports.

In establishing a chess program I wish to use my own ideas. I have read up on
the approaches used by others, but feel you can only do something valuable if
you do it differently.

So: What is my aim and what will be my approach?

My aim...

There are many 'playing' programs, so this will not be one more.. Instead I
want a program which will take a position and identify to important features
of that position. The aim is to guide a human player.

My approach...

These have not been fully clarified in my mind, but my main ideas are:-

1 That in order to identify the elements in a position that position must be
  'settled'. My initial idea is to explore a position initially and produce
  an array of the likely derived positions and to analyse each of these.

2 The position analysis will be based on the Karpov approach

3 The positions will display with some type of prompt showing the elements
  in a verbal form.

  Taking these one at a time

  1 Position clarification

    a need to identify validity of the position

    b need to identify if our king is in check

    c need to identify pinned pieces

    d  need to identify the forcing moves in a position i.e.
      i   checks
      ii  captures
      iii attacks on a Queen
      iv  attacks on an unprotected piece
      v   pins
      vi  pawn promotion
      vii attacks on a higher value piece

Starting with 1a I undertook a simple test on the python Chess
library. In a Jupyter Notebook I removed the black king from the
starting position and generated a board. This was accepted by the
library without complaint. I will need, therefore, to develop my own
routine to check the validity of the position.

The analysis of board validity will always be taken from the viewpoint
of the colour which is to play. This perspective will be called 'the
player'. The other side will be identified as 'the opponent'.

The analysis will always be made with The Player to move.

The validity tests I will use are:-
  Are there exactly one king for each side on the board?
  Is the opponent in check?
    If so then the position is invalid. The opponent has not played
    a move to get himself out of check or has played a move which has
    put himself in check.
  Are there less than 9 White Pawns and 9 Black Pawns on the board?
  Are there less than 17 White Pieces and 17 Black Pieces on the Board?
  Is the total of pawns and queens for each side less that 10?
  Does each side have a maximum of one white-squared and black-squared
    Bishop?
      This might be possible if one of the sides under-promoted to
      a Bishop, but this is unlikely.
  Are there any Pawns on the 1st or 8th Rank of the Board?

4/2/21
Added file to check for position validity from a fen string.

Began to add checks on validity:
  1 fen includes the correct number of parts
  2 that board has one White and one Black kings

at this stage the identification of an error results in a text
message

5/2/21
Added errorLog to positionValidity.py for testing purposes

7/2/21
I want to give the user the opportunity to correct the fen.

The board string has not, yet, been fully checked so initially
I need to check the other elements to see if any of them are
acceptable. There will be need to be checks later to see if they
accord to the fan rules. Maybe I can use these to search the
elements of the fen string to see if any appear correct.

Whilst this approach may necessitate a re-write to confirm each
element in turn I will initially concentrate on the testing.

fenToPlay must be a single character, either w or b although I
will also accept the capitalised. (Need to check what is correct
in the fen specs and adjust the element accordingly)

9/2/21

added pytest checks for positionValidity

added fen validity check for castling

10/2/21

added test validity of EP square in fen. Decided to set these to 0 and 1
respectively if they are incorrect.

adapted 'unknown' elements in case of inadequate fen.

added tests for half move and move count

11/2/21

Decided to re-factor the board checks into a new class for complex board
checks, importing features from pychess, if necessary. (Initially the import
would be by construction rather than inheritance) This is because some of
the problems (such as identifying whether a king is in check) have already
been solved in pychess.

This approach will need the fen elements to be passed to the new class, so an
initial check that all 'unknown' items have been corrected. I will also need
to build in a check that the 'unknown' fen elements are consistent with the
errorLog. I will also need to be able to reconstruct the fen string from the
fen elements.

The order of these changes are, therefore,
  1 compare 'unknown' elements to error log
  2 process required to clear all 'unknown' elements
  3 rebuild full fen string (if all unknowns have been solved)
  4 add board checking class

Non-Board Error Codes List
  error Codes           unknown
  fenError              ..one or more of.. fenToPlay, fenError, fenCastling,
                        fenEP [fenHalfMoveClock and fenMoveCounter are reset to 0
                        1 respectively if original fen is incorrect]
  fenToPlayError        fenToPlay
  fenToPlayLength       fenToPlay
  fenCastlingError      fenCastling
  fenCastlingLength     fenCastling
  fenEPLength           fenEP
  fenEPSquareInvalid    fenEP
  fenEPSquareUnclear    fenEP [This is where it is not known which player is
                        next to play, so the quoted EP square cannot be
                        confirmed]
(see ErrorCode.txt for fuller explanation and details of fenBoard errors)

ACTION added test for fenBoard (not 'unknown'), test_fenHalfMoveClock (is a
digit) and test_fenMoveCounter (is a digit)

ACTION add check of error codes against 'unknown items'

But first see todo.txt as I need to consider whether the current methodology
just makes the program too complex and subject to possible error.

14/2/21

Major redesign

Firstly set up a dictionary to hold the elements, rather than simple variables.
By this method I hope to be able to identify elements of the fen in a more
flexible way.

19/2/21

added boardToString, displayBoard and displayToPlay

added testpy, but found that string resulting from Board to string difficult
to check. Re worked Board to String to convert it to an array. (dropped
boardToString, added boardToArray). Added augmentation to boardToArray to
display file letter and rank numbers.

TO DO add pyTest re above

20/2/21

prior to writing pyTest I re-thought the augmentation of boardToArray
I now feel that adding this to the array reduces the possible uses of
this array. Move the augmentation to a separate function (augmentBoard)

1. rename boardToArrayOld board
2. rewrite boardToArray without augmentation
3. make new function augmentBoard
4. check output of boardToArrayOld same as boardToArray + augmentBoard
5. delete boardToArrayOld

Added coloured test using colorama

Added pytest for above

21/2/21

added query routine w/b

pytest has a problem with input routines, making running a automated test
difficult. The main method appears to by mocking the input. I initially
thought of bypassing the input command, but this doesn't 'prove' the
imput correct.

Alternative: testing input functions individually by direct access to
them, catching the embedded inputs with a "testing = True" switch programmed
to return a set result. This wouldn't work unless there was some way to
identify which functions were being tested.

I think I am stuck with the mocking method.

22/2/21

After much internet research added mock to python and tested all good
inputs to toPlayInput.

To create an incorrect input followed by a correct input tried to use
the pop method. This didn't work... it got stuck in a loop.
The with.mock.patch obviously doesn't re-run so pop doesn't get
repeated. Same problem occurs if I try to set return_value directly;

got this working by changing return_value to side_effect

committed 22/2/21

In preparation for castlingInput added simple board search to see if
Kings and Rooks are on their original squares.

I made the classic mistake of changing too much. I was over-confident
after my success with castling input and built a routine to check
castling against K & R positions. This meant designing a fenToString
method, a method to search that string to check the content of the
e1, a1 , h1, e8, a8, and h8 squares AND the method to use this
information. To make matters worst I saw a number of inconsistencies
on the handling of arguments and tried to 'standardise them',

The result was a number of broken methods and a castling check system
which fails by resetting castling to '-' every time! I also am behind
on writing suitable pytests for these new methods,

23/2/21

I will approach this self-created mess by
  a)  Identifying the error in the checkCastling method
  b)  Move the use of this function until after fenBoard has beeen
      checked
  c)  add pytest for fenToString
  d)  add pytest for interrogateBoard
  e)  add pytest for checkCastling
  f)  notate Fen class
  g)  group method within the Fen Class into types
  h)  check that the passing of arguments within each method type is
      consistent
  i)  check that the default values within each method type is consistent
  j)  check that return value is consistent within each method type
  k)  build consistency checks in pyTest
  l)  consider refactoring to make method groups into classes to reduce
      duplication and enforce consistency within each method group

I will call this the REFOS PROGRAM (REFOS = REcover From Own Stupidity)

LORD please help me keep to this.

REFOS:b Identify checkCastling error

I can get the expected result by setting the default castling argument
to 'KQkq'. corrected by adding temporary 'progress prints'. solution still
works with defaul arguement set to '-', ACTION:
      1) change default back to 'KQkq'
      2) remove progress prints
      3) test with changes to fen position
      4) save progress in git

In direct test I have identified a problem. I know, for example, that both
kings have 'moved' and 'moved back' how do I show that? Currently the
system sets KQkq based on the pieces current position only.

The assumptions I will make on castling rights are:-
      1)  if the original input fen was correct and gave '-' I will
          assume this to be correct
      2)  if the original input fen gave anything less than 'KQkq' I
          will assume this to be correct
      3)  if an incomplete string or an incorrect string was given I
          will make no assumptions, but proceed with checkCastling and
          inputCastling methods

In terms of checkCastling, therefore
      1)  if '-' given I will return '-'
      2)  if a 'short fenCastling element' I will assume that any
          castling option missing has been left off for a reason.
          'q' >> 'q' or '-' depending on position of blk k & qr
          'k' >>  'k' or '-' depending on position of blk k & kr
          'kq' >> 'kq','q','k','-' depending on blk k, kr, qk positions
          'Q' >>  'Q' or '-' depending on position of wht K and QR
          'Qq' >> 'Qq','Q', 'q' or '-'
          'Qkq' >> 'Qkq','Qk','Qq','kq','q','Q','-'
      3)  if fenCastling not given then I will set castling according
          to the position of the respective king and rook positions

Rethinking checkCastling, therefore, gives the following:-
  - if there is no fenCastling in the dictionary the arguments then no
  castling argument will be passed to the method, the default being
  set to '?'

REFOS:b mpove use of checkCastling until after testBoard
stage 1 moved checkCastling -done
stage 2 rewrite directPartFenInput and directPartFenInput to match new
        __init__ requirements

27/2/21

The last few days have proved to me that the 'type/test/improve' method
of programming has serious faults. I changed something, the program
failed and I found it difficult to identify where the fault lay. I,
therefore, undertook a complete rewrite to a new python file (fenChecker.py).

The new structure of __init__ is
  1)  To check each element in turn
        functions: checkBoard, checkToPlay, checkCastling, checkEP
        NB incorrect halfMove and move elements are still rest to
        0 and 1 respectively
  2)  If the element appears correct the respective variables are set.
      These have become simple variables, rather than being in a dictionary.
        variables: board, toPlay, castling, ep, halfMove and move
  3)  If the checking process identifies a possible fault the respective
      input method is called. These are currently still set up as static
      methods (to be reconsidered later).
        input methods: inputBoard, inputToPlay inputCastling, inputEP
        NB all these are decorated @staticmethod
        NB there are no input methods for halfMove and move as these are
        changed directly in __init__

  These changes have made the program clearer. I am currently reconstructing
  the pytests for these changes. the biggest change in the new pytest is
  dropping default values and adding mocking of the input() function. This
  has meant I can drop the check in each of the input methods which
      -identified whether the call was from pytest and (if so)
      -set the input method return to a pre-set default

1/3/2021

Whilst changing something major is a problem complication especially before
completing the pytest regime. My wish is, however, to be a little more
flexible. Currently if the elements of the fen are provided, but out of
order, they cannot be recognised. It is clear, however, that:-
      1) an element 'w' must be the toPlay element
      2) an element 'KQkq' must be the castling element and
      3) an element 'e3' must be a epSquare

If I continue with the current pytest, however, I will need to perform a
complete a complete re-write of the pytests. For this reason I will introduce
this change before completing the pytest rebuild.

ACTION
1. added indentification of toPlay element 
